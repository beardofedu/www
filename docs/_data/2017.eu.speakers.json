[
    {
        "speakers": [
            {
                "details": "",
                "name": "Tim Rogers",
                "twitter": "timrogers",
                "website": "https://timrogers.co.uk",
                "slug": "tim-rogers"
            }
        ],
        "abstract": "<p>As the old saying goes, \u201cyou never get a second chance to make a first impression\u201d. When you first meet someone new (not least at a conference for documentarians!), those first few moments set the tone. In exactly the same way, the experience your user has when they first \u201cmeet\u201d your product and get to grips with it will set the tone for your entire relationship with them.</p>\n<p>As documentarians, we so often focus on building detailed and exhaustive \u201creference\u201d documentation, but in doing that, we forget to provide the right kind of \u201cgetting started\u201d experience for a user brand new to our product. </p>\n<p>At GoCardless, we spent the first years of the life of our platform focused on building high-quality reference documentation. But in Summer 2016, we kicked off a big piece of work on a new set of resources: a \u201cgetting started\u201d guide for our API, getting the user from nought-to-sixty on our developer platform.</p>\n<p>To make the right first impression, we had to turn things on their head and think from the reader\u2019s perspective. From this perspective, what we\u2019ll write and build looks very different to our \u201creference\u201d documentation, seeking not only to teach the user how to use our product, but also to explain the fundamental concepts behind it and to bring the user to the all-important \u201caha!\u201d moment where they see the value in what we\u2019re offering.</p>\n<p>In this talk, I\u2019ll go through:</p>\n<ul>\n<li>the fundamental differences between \u201creference\u201d and \u201cgetting started\u201d documentation</li>\n<li>the lessons we learnt on the way as we experimented and spent extensive time with end users</li>\n<li>what we built</li>\n<li>the results \u2014 from our users\u2019 perspective, and in terms of how we build demand within the company for further \u201cgetting started\u201d content</li>\n</ul>",
        "title": "\"You never get a second chance to make a first impression\": writing great \"getting started\" documentation"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Garen Torikian",
                "twitter": "gjtorikian",
                "website": "",
                "slug": "garen-torikian"
            }
        ],
        "abstract": "<p>GitHub is migrating its public API system from REST to GraphQL. \nIn this talk, I'd like to go over my personal experiences writing API documentation for ten years, and why GraphQL's \"everything needs documentation\" approach is a much needed improvement. I'd go over past API tooling and methodologies, current best practices to make \"sane\" autogenerated API documentation, and why I think that GraphQL is a boon for technical writers, developers, and end users.</p>",
        "title": "Finally! Trustworthy and Sensible API Documentation with GraphQL "
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Lauri Apple",
                "twitter": "@lauritaapplez",
                "website": "https://github.com/LappleApple/feedmereadmes",
                "slug": "lauri-apple"
            }
        ],
        "abstract": "<p>As a former journalist, I tend to think in terms of storytelling. As an open source evangelist, I invite you to do the same. What you share on GitHub tells a story about you, your development practices, and your openness to others in the open source community. If you're motivated to gain users, contributors, and positive feedback about your projects, then building a compelling, coherent narrative is essential. </p>\n<p>In this presentation, I'll share insights gained from curating Zalando's GitHub repository so we can tell a better story. I'll describe how we've used GitHub and other tools to create guidelines and processes that bring sanity to our storytelling. And I'll talk about how focusing on higher-quality docs has helped us to instill a stronger product mindset in our development teams. Writing a README, for example, offers an opportunity to tell the world why a project exists, how it works (and why), what makes it unique, and how it might evolve over time. I'll discuss how this process not only empowers developers, but also those of us who are technical writers and storytellers\u2014offering several real-life examples to (hopefully) inspire you.</p>\n<p>From 400+ projects of widely differing quality, reliability and maintenance levels, we've winnowed our OSS offerings at Zalando to make our highest-quality work more discoverable and user-friendly. If your organization is facing GitHub-bloat challenges, looking for ways to manage your repos more effectively, or wondering how better docs can help your OSS efforts succeed, you might find some help here.</p>",
        "title": "Telling a Great Story on GitHub"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Daniele Procida",
                "twitter": "EvilDMP",
                "website": "",
                "slug": "daniele-procida"
            }
        ],
        "abstract": "<p>Nearly everyone agrees that good documentation is important to the success of software projects, and yet very few projects actually have good documentation. Even successful projects often have barely adequate documentation.</p>\n<p>Often, it\u2019s not for want of effort - the project\u2019s developers have worked hard on it - nor for lack of documentation - the authors have produced a lot of it.</p>\n<p>It simply turns out to be not very good - not helpful enough for the users who should be able to rely on it, and a depressing chore for the authors who have to maintain it.</p>\n<p>The good news is that both these problems can be solved by understanding how documentation works, and that there are four distinct kinds of documentation - with four distinct functions. The four kinds of documentation are:</p>\n<ul>\n<li>learning-oriented tutorials</li>\n<li>goal-oriented how-to guides</li>\n<li>understanding-oriented discussions</li>\n<li>information-oriented reference material</li>\n</ul>\n<p>Structuring documentation according to its four distinct functions helps ensure that each of them is adequately served. It also makes it far easier to write and maintain.</p>\n<p>Using real-life examples I\u2019ll draw out the key functions of documentation, and how they map onto different ways of writing it. Putting this into practice is simple when armed with some basic guidelines. The benefits are huge, and available with a minimum of effort.</p>\n<p>I won\u2019t be discussing documentation tools or software or other topics that have been covered amply elsewhere, but some neglected and poorly-understood aspects of documentation that will make your software projects and teams more successful.</p>",
        "title": "The four kinds of documentation, and why you need to understand what they are"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Cory Williamson-Cardneau",
                "twitter": "@cory_will",
                "website": "http://cory.williamson-cardneau.com/",
                "slug": "cory-williamson-cardneau"
            }
        ],
        "abstract": "<p>You've heard about diversity problems in tech, right? We know the problem exists at every point in the process: education, internship opportunities, hiring. We don't talk much about what happens to the people we <em>do</em> work with. </p>\n<p>As documentarians, we spend a lot of time thinking about the best words to use for our products, tutorials, manuals. We know that words matter. \"Microaggressions\" are the small indignities that people of color, non-cis-gendered folks, women, and others experience on a daily basis. Microaggressions at work tell us, over and over, that we don't really belong in that workplace. So let's talk about the words we use with our coworkers. Let's talk about how we can all make diversity a daily practice at work, not just a hiring problem.</p>",
        "title": "Sticks & Stones... Microaggressions & Inclusive Language at Work"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Kathleen De Roo",
                "twitter": "",
                "website": "",
                "slug": "kathleen-de-roo"
            }
        ],
        "abstract": "<p>Note: this talk could be a 30 minute presentation or an unconference discussion.</p>\n<p>Also having problems finding your (google) docs? Keeping the whole picture in mind?\nThe first step is to give docs consistent names, but we also need to check our database regularly, and decide what to keep or destroy. What should we base those decisions on? \nIn this talk I\u2019ll give an overview of how you can efficiently handle your docs through the lifecycle model (planning - creating - keeping/destroying) used by archivists/records managers. What is important to keep in mind? How can you organise your own database or that of a company? As a conclusion, I will help you to create a \u201cmanage the docs\u201d checklist.</p>",
        "title": "Manage your docs like an archivist"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Floriana Pagano",
                "twitter": "@reginazabo @accessnow",
                "website": "https://www.accessnow.org/help",
                "slug": "floriana-pagano"
            }
        ],
        "abstract": "<p>Free software projects, community-oriented online services and grassroots technological organizations often rely on volunteer-based documentation, both as regards writing end-user guides and localization. This can produce inconsistencies in style and approaches and, in the end, compromise the usability of the tools or services described in the documentation. There are solutions, like publishing guidelines, enabling volunteer contributions only through git pull requests, or hiring coordinators and reviewers.</p>\n<p>During this discussion, we will exchange reflections and tips on the best practices for volunteer-based documentation, so as to start a conversation on how to improve this process in free software projects and in efforts that rely on limited funds but on a strong community of eager volunteers.</p>\n<p>Depending on the number of participants, the discussion can take place in one group or be split in smaller groups that will refer to the other participants during the last 10 minutes of the discussion.</p>",
        "title": "Managing community-driven documentation - how to herd doc-writing cats through motivation and a pinch of automation"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Kate Wilcox",
                "twitter": "",
                "website": "http://gallery.yulefrog.com/",
                "slug": "kate-wilcox"
            }
        ],
        "abstract": "<p>This presentation explores the evolution of language in technical documentation. </p>\n<p>The reign of the long-form narrative in tech docs is long gone. Nobody wants to read a 600 page user manual cover to cover before using an application or API. Users crave bite-size chunks of information, and they want them exactly at the point of need. They want just enough information to complete their task and not one conjunction more. In other words, users want high-calorie nutrient-dense documentation, and they want it fast.</p>\n<p>To satisfy users, we documentarians embrace minimalism and topic-based architectures such as DITA. We organize content by type: task, concept, reference, etc. We use active voice. We keep sentences short. And consciously or not, we\u2019ve begun to challenge time-honored tech writing traditions, such as prohibitions on future tense, contractions, idioms, and colloquialisms \u2013 at least in American English documentation. </p>\n<p>What\u2019s more, it\u2019s no longer enough for docs to be technically accurate. They must also use contemporary themes familiar to users and, whenever possible, humor. Exhibit one is this Google Chrome error:</p>\n<p>\u201cAw Snap! Something went wrong while displaying this webpage.\u201d</p>\n<p>And the folks at ReadMe.io used this line to describe a Delete button in their interface (from the 2007 film, Juno):</p>\n<p>\u201cThis is one doodle that can\u2019t be undid, homeskillet.\u201d</p>\n<p>Without question, the language we use in technical documentation is changing. Contractions, idioms, and colloquialisms, which were once banned as potentially confusing to translators, are now commonplace, and we use them to make our docs sound friendlier. Jargon abounds, the word \u201cplease\u201d is no longer taboo, and exclamation points are not only allowed, they\u2019re encouraged! They show enthusiasm for the subject!!</p>\n<p>In this presentation, we\u2019ll mine the docosphere for current trends, innovations, and answers to these questions: \n\u2022   How has the language in tech docs evolved over the past decade, and where is it headed?\n\u2022   What are the minimum daily requirements for language in this brave new world: Correct grammar, complete sentences, parallel construction, proper word choice, clarity, brevity?\n\u2022   What is the role of humor in tech docs?\n\u2022   Is OK to for tech docs to use colloquialisms, idioms, contractions, and even emojis? \n\u2022   What are the implications of this evolution on localization? </p>",
        "title": "Aw Snap!  The Docs, They Are A-Changin\u2019 (with apologies to Bob Dylan)"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Thomas Parisot",
                "twitter": "oncletom",
                "website": "https://oncletom.io/",
                "slug": "thomas-parisot"
            }
        ],
        "abstract": "<p>The usual way of writing a technical book is to open the Word or LibreOffice application, to write some content, to make a backup, to send it by email to the publisher and to deal with the feedbacks. And repeat.</p>\n<p>However in 2017 we can do differently by using open formats like Asciidoc, by using version control to propagate changes, by using collaborative platforms like GitHub or GitLab to collate feedbacks in any form as well as transforming text and code into readable and interactive artefacts.</p>\n<p>It gives us a unique opportunity to approach the whole process of writing in term of \"content experience\", of \"toolchain\" and of \"distribution\".</p>\n<p>In the end, a \"book\" becomes a \"writing format\" as we can reuse the same pattern to manage any kind of \"content\" \u2014 articles, publications, essays, documentation \u2014 that we can transform in physical books, e-books, interactive web pages etc.</p>",
        "title": "Writing a book in 2017 "
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Lesia Zasadna",
                "twitter": "",
                "website": "",
                "slug": "lesia-zasadna"
            }
        ],
        "abstract": "<p>Any doc - every doc - that you deliver, it's only as useful as the requirements it satisfies. Typical requirements revolve around target audience, method of delivery, technical limitations. But after the doc is done, then come unexpected expectations. John - your key stakeholder - dislikes chiches like corporate templates and wants to stand out with neat Apple-styled docs. Also, it was a mistake to tell him about similar 'really cool docs' you already did for his colleague Jane because apparently they don't get along well, and now he proudly decided that his product is so much better that hers that it doesn't need docs at all... Suddenly, your docs should not only make users happy, but also help your stakeholders achieve their aims - move up a career ladder, impress the boss, get a bigger paycheck. The success of your docs depends on things you are never told. This talk is about reading your stakeholders and deducing the ultimate requirements.</p>",
        "title": "Requirements that you didn't know were there"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Chris Ward",
                "twitter": "@chrischinch",
                "website": "gregariousmammal.com",
                "slug": "chris-ward"
            }
        ],
        "abstract": "<p>In this presentation I will explore other ways to communicate concepts beyond words to show that documentation needn't just be about technical writing.</p>\n<p>In the first part of the presentation I will briefly cover theories and principles behind forms of communication and what documentarians can learn from them. Topics such as:</p>\n<ul>\n<li><strong>Portraying meaning in images</strong>: Iconography, maps, manuals</li>\n<li><strong>Non-verbal conversation</strong>: Body language, ways of speaking</li>\n<li><strong>Fidelity</strong>: Sketch notes, simplicity, style</li>\n</ul>\n<p>During each of these topics I will present in the style of the topic, so expect something a little different.</p>\n<p>In the second practical part of the presentation I will take elements of the theory and applying them practically. I will start by looking at screenshots and diagrams. When and how to use them, what they should show, and how to manage them.</p>\n<p>Then I'll cover taking screenshots to the next level with animated gifs and screen recordings that show clear user flows and expected results.</p>\n<p>Finally in this part of the presentation I will cover interactive documentation, and the options for allowing readers to directly manipulate and experiment with documentation and directly see inputs and outputs.</p>\n<p>In summary, our work typically appears on one of the most dynamic platforms (the web) that has ever existed, let's all do more with it!</p>",
        "title": "Documentation beyond words"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Meike Chabowski",
                "twitter": "@MChabowski",
                "website": "",
                "slug": "meike-chabowski"
            }
        ],
        "abstract": "<p>For 22+ years, I am working in IT \u2013 most of this time in the \u201cbusiness-related\u201d part of the game. Roughly a year ago, I decided to change something. Well \u2013 still working in IT, and still working in the same company \u2026  But I moved from a Product Marketing role (which I hold for about 17 years) to R&amp;D, because the documentation team \u201cmade me an offer I couldn\u2019t refuse\u201d. </p>\n<p>Of course I interacted with many of our engineers before, and of course I also knew most of the documentation team members before. But in retrospective, I can say that I somehow lived on \u201canother planet\u201d before, and that my first year as documentarian in an open source software company was definitely deeply eye-opening for me. </p>\n<p>If you are curious now, join the talk and hear more about my main takeaways regarding documentation in general and the experiences with my team in particular. </p>",
        "title": "An Alien Looking From the Outside In: Main Takeaways After One Year in Documentation"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Daniel D. Beck",
                "twitter": "ddbeck",
                "website": "https://ddbeck.com",
                "slug": "daniel-d-beck"
            }
        ],
        "abstract": "<p>It could happen to you: your project is canceled, your team is \u201creorganized\u201d, or your company is closing its doors. Some or all of your software, service, or API may not be long for this world. What will you say to the people using your software? In this talk, you\u2019ll learn how to avoid a communications disaster when it\u2019s time to break bad news to your users.</p>\n<p>Whether you\u2019re deprecating significant features or shutting down entirely, you still have a chance to make life better\u2014or at least a little less worse\u2014for the people who have come to rely on your work. In this talk, you\u2019ll learn how to:</p>\n<ul>\n<li>plan your shutdown communications to make sure no users get left behind</li>\n<li>let your users down easy with the appropriate voice, tone, and content</li>\n<li>cope with a stressful situation</li>\n</ul>\n<p>From your initial announcement to your service\u2019s last day, you\u2019ll learn how to say goodbye in a way that\u2019s good for you and your soon-to-be-former users.</p>",
        "title": "Deprecate and destroy: documenting your software\u2019s last days"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Stuart Culshaw",
                "twitter": "@ouebguy",
                "website": "",
                "slug": "stuart-culshaw"
            }
        ],
        "abstract": "<p>Created in 2016, Tech Writers Without Borders aims to connect technical communicators with nonprofits seeking help with their documentation and training materials.</p>\n<p>Using examples from our work with iNERDE, a social enterprise seeking to empower West African youth with Science, Technology, Engineering and Math education, I will describe the many ways in which technical communicators can make a real difference to the operational effectiveness of nonprofits and the lives of those they serve.</p>\n<p>If you, too, are interested in volunteering your skills for social impact, this session will hopefully inspire you to action, or, at the very least encourage you to view the value of your craft in a new light.</p>",
        "title": "Tech Writers Without Borders: Making the world a better place, one (numbered) step at a time"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Ed Stenson",
                "twitter": "@edstenson",
                "website": "",
                "slug": "ed-stenson"
            }
        ],
        "abstract": "<p>In the workplace we experience team-building exercises. The focus there is on many-to-many relationships to help people work well in groups. At the other end of the spectrum we have opportunities for personal development where the focus is on just one individual. </p>\n<p>Documentarians inhabit our own special place on this spectrum. It\u2019s clearly defined and, in the world of software development, it\u2019s unusual. We typically work one-on-one with subject-matter experts. Who ever has training for that?</p>\n<p>The surprising answer is: \u201clots of people\u201d. Doctors, for example. Teachers, despite the fact that they normally work with groups. The amazing stewards at my local beer festival. They walk cheerfully into tense situations and leave guests smiling.</p>\n<p>We've been left to follow our instincts for too long. It's time to acknowledge this and to discuss strategies for change.</p>\n<p>There are valuable things we can learn from other fields.</p>",
        "title": "One-on-One 101"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Raphael Pierzina",
                "twitter": "@hackebrot",
                "website": "https://raphael.codes/",
                "slug": "raphael-pierzina"
            }
        ],
        "abstract": "<p>When starting a new project, developers, myself included, usually get right into hacking things, like tinkering with libraries, that we would like to learn or solving a particular problem as quickly a possible. Occasionally we also decide to publish the resulting project to a software repository such as PyPI for Python or NPM for Node.js etc., so that others can use our nifty code, submit a pull request and maybe even form a community around the project.</p>\n<p>As the creator, you might be lucky and someone will find your project on the front-page of GitHub or maybe even Hacker News or Reddit. What happens next is on you really. But what does that mean?</p>\n<p>Before jumping right to the command line and installing your package, those who are interested usually try to find out what problems the project is solving and how it can help them with their own. That's what your README file is for - it's most likely the first thing potential users read, that you control.</p>\n<p>A good README briefly and concisely explains what your software does, how it can be installed and what API it exposes. You also want to provide information on the requirements, the license it uses and how the project is managed. Who are you? How to get in touch to report problems and give feedback? Where can potential users find the Code of Conduct for your project?</p>\n<p>This talk is for everyone who is interested in working on open source projects and wants to know how documentation can help newcomers and more experienced users use your code and to encourage them to engage in the community.</p>",
        "title": "Hi, my name is README!"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Becky Todd",
                "twitter": "@beckatodd",
                "website": "",
                "slug": "becky-todd"
            }
        ],
        "abstract": "<p>Crowdsourcing is an increasingly attractive practice that is being used to develop documentation. When well designed, this approach increases documentation velocity and reduces bottlenecks. However,  there are (at least) two huge challenges:</p>\n<ul>\n<li>Keeping documentation quality high.</li>\n<li>Ensuring that content gets developed in line with the products and services it supports.</li>\n</ul>\n<p>While no doc set will ever be perfect, there is hope for overcoming these challenges. In this talk, I'll share lessons learned from working through these challenges at companies of various sizes. We'll walk through content management best practices, including: </p>\n<ul>\n<li>Building an effective writing toolkit </li>\n<li>Setting occasional authors up for success</li>\n<li>Defining content management strategies for globally distributed teams</li>\n</ul>",
        "title": "A content manager's guide to crowdsourcing the docs"
    },
    {
        "speakers": [
            {
                "details": "",
                "name": "Christy Lutz",
                "twitter": "@canncrochet",
                "website": "",
                "slug": "christy-lutz"
            }
        ],
        "abstract": "<p>Getting feedback on your work is a necessary part of any project, and it makes your output stronger and more diverse. But it can be hard when your work is being evaluated. Sometimes, it feels like your reviewers have a deep and abiding interest in pain. You\u2019ll never succeed! Well, you have already succeeded just by asking for feedback.  Together, we\u2019ll discuss how to build up your tolerance for taking that feedback.</p>\n<p>Feedback became so much easier for me when I learned design critique guidelines from a co-worker and UX Designer. Design critique guidelines are a set of rules and practices that can make getting and giving feedback easier. This presentation passes along the strategies I learned so you can implement design critique guidelines into your review process and make feedback painless.</p>",
        "title": "You have already succeeded: Design critique guidelines make feedback easier"
    }
]
